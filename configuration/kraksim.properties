#cityMapFile = input/maps/Trework/model-T.xml
#cityMapFile = input/maps/krakow_duzy_rework/krakow_duzy.xml
#cityMapFile = input/maps/Trework/model-A.xml
cityMapFile = input/maps/model_krakow/model-krakow.xml


# dupa dupa
carMoveModel=multiNagel:decProb=0.2
centralNodesAlgMod=none:CrossroadsNumber
zone_awareness=enabled

# dupa dupa

realModule=realExtended
#realModule=real
switchTime=2
minSafeDistance=5

#travelSchemeFile = input/maps/Trework/trafficSchemes/loe-traffic-T.xml
#travelSchemeFile = input/maps/krakow_duzy_rework/trafficSchemes/loe_traffic.xml
#travelSchemeFile = input/maps/Trework/trafficSchemes/QL/hig-traffic-A.xml
travelSchemeFile = input/maps/model_krakow/trafficSchemes/traffic-krakow-loe.xml

statOutFile=output/results/loe_

lastSessionFile = configuration/lastSession.properties

visualization = false
#visualization = true

algorithm = sotl:zone=18
#algorithm = rl
#algorithm = static

dynamicRouting=true
#dynamicRouting=false

enablePrediction = true
#enablePrediction = false

predictionModule = weka
predictionConfiguration = configuration/wekaPrediction.properties

#predictionModule = pattern
#predictionFile = configuration/prediction.strong_big.config.xml

yellowTransition = 3
#turnStats = true
#turnStatsQuietPeriod = 1000
minimalSpeedUsingPrediction = false
globalUpdateInterval = 300

#Parametry dla optymalizacji ruchu opartego o miary SNA
#czy algorytm wlaczony
#snaEnabled=false
snaEnabled=true
snaDistanceType=simple
#liczba klastr�w
snaClusters=3
#co ile krok�w ma sie odbywac przeliczenie miar i klastrowanie
snaRefreshInterval=200

#Parametry TEST2013
#"true" => enabled
#other => disabled
TEST2013Enabled=false
TEST2013IntersectionVisitor=false
TEST2013IntersectionLinkVisitor=false
TEST2013LinkVisitor=false
TEST2013WaitLimit=100

emergencyVehiclesConfiguration = configuration/emergencyVehicles.properties

# Obstacle visibility
obstacleVisibility = 90

# double, how much turns ahead car will test speed and positions to determine if switching is safe
crashFreeTime = 1

# number of turns required for car to be in "Want To Switch Lanes" state to ignore switch lane anti-crash rules
# higher - more aggressive lane switch
turnsToIgnoreCrashRules = 5000

# int, cars will be forced to request switch lanes to correct for next intersection at this * maxSpeed distance
intersectionLaneSwitchTurnThreshold = 10

# power function for switch lane action probability
probabilityPowerValue = 2

# force car to stop at this distance to intersection if its on wrong lane (or n times this distance if it has to cross n lanes to get to good one) 
forceStopOnWrongLaneForIntersection = 80

# how often dump statistics to file (in turns)
statisticsDumpToFile = 10

#car velocity increase every turn
carAcceleration = 2

#probabiliy of car being broke
carBrokeProbability = 0.0
#carBrokeProbability = 0.00007

# time needed to get rid of certain broken car
brokeCarStayDuration = 90

# if sim should use driver archetype
#useArchetype = true
useArchetype = false

# how many emergency will be spawn on top of normal cars. For 100 normal cars and 0.2 param, simulation will contain 120 cars
emergency_spawnPercentage = 0.0

# Multiplier for emergency max speed
emergency_speedLimitMultiplier = 1.5

# Multiplier for emergency acceleration
emergency_accelerationMultiplier = 1.5

# Swap Reduce datails : its treats emergency car the same as car which is being swapped
# Mode for reducing emergency car speed in case of swap, possible values "divide" or "subtract", default "divide"
emergency_swapReduceMode = divide

# Value used in reducing emergency car speed in case of swap, 
#   when mode == "divide"       velosity /= value
#   when mode == "subtract"    velosity -= value
emergency_swapReduceValue = 2
