package pl.edu.agh.cs.kraksimcitydesigner.propertiesdialogs;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.apache.log4j.Logger;

import pl.edu.agh.cs.kraksimcitydesigner.MainFrame;
import pl.edu.agh.cs.kraksimcitydesigner.element.DisplaySettings;

/**
 *
 * @author krzysiek
 */
public class SettingsDialog extends JDialog {
    
    private static final long serialVersionUID = 701357110147121100L;
    private static Logger log = Logger.getLogger(RoadPropertiesDialog.class);
    private MainFrame mainFrame;
    private final JFileChooser fc;
    
    private double cellPerPixel;
    private File backgroundImage;

    public SettingsDialog(MainFrame parent, JFileChooser fc, boolean modal) {
        super(parent, "Project settings", modal);
        this.mainFrame = parent;
        this.fc = fc;
        initComponents();
  
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                DisplaySettings displaySetting = mainFrame.getDisplaySettings();
                boolean shouldRepaint = false;
                
                // cellsPerPixel
                try {
                    double newCellsPerPixel = Double.parseDouble(cellPerPixelTextField.getText());
                    if ( Math.abs(newCellsPerPixel-cellPerPixel) > 0.001 ) {
                        displaySetting.setCellsPerPixel(newCellsPerPixel);
                        mainFrame.setProjectChanged(true);
                    }
                }
                catch (NumberFormatException exception) {
                    JOptionPane.showMessageDialog(SettingsDialog.this, "cellPerPixel must bo corrent number.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // backgroundImage
                File newBackgroundImageFile = new File(backgroundImageTextField.getText());
                if (newBackgroundImageFile.canRead()) {
                    if (! newBackgroundImageFile.getAbsolutePath().equals(
                            backgroundImage.getAbsoluteFile())) {
                        
                        mainFrame.setProjectChanged(true);
                        displaySetting.setBackgroundImage(newBackgroundImageFile);
                        shouldRepaint = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(SettingsDialog.this, "Can't read file.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (shouldRepaint == true) {
                    mainFrame.refresh();
                }
                
                setVisible(false);
            }
        });
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        });
        browseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = SettingsDialog.this.fc;
                int returnVal = SettingsDialog.this.fc.showOpenDialog(SettingsDialog.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    setBackgroundImage(fc.getSelectedFile());
                    System.out.println("New backgroundImage selected.");
                } else {
                    System.out.println("Not new backgroundImage selected.");
                }
            }
        });
    }
    
    public void refresh() {
        DisplaySettings displaySettings = mainFrame.getDisplaySettings();
        setCellsPerPixel(displaySettings.getCellsPerPixel());
        setBackgroundImage(displaySettings.getBackgroundImage());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        cellPerPixelLabel = new javax.swing.JLabel();
        cellPerPixelTextField = new javax.swing.JTextField();
        cellPerPixelDescription1Label = new javax.swing.JLabel();
        cellPerPixelDescription2Label = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        backgroundImageLabel = new javax.swing.JLabel();
        backgroundImageTextField = new javax.swing.JTextField();
        backgroundImageDescriptionLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        cellPerPixelLabel.setText("Cell per pixel:"); // NOI18N
        cellPerPixelLabel.setName("cellPerPixelLabel"); // NOI18N

        cellPerPixelTextField.setText("1.0"); // NOI18N
        cellPerPixelTextField.setName("cellPerPixelTextField"); // NOI18N

        cellPerPixelDescription1Label.setText("This value is multiplyed by the distance between nodes in pixels"); // NOI18N
        cellPerPixelDescription1Label.setName("cellPerPixelDescription1Label"); // NOI18N

        cellPerPixelDescription2Label.setText(" to obtain default number of cells that links should have."); // NOI18N
        cellPerPixelDescription2Label.setName("cellPerPixelDescription2Label"); // NOI18N

        saveButton.setText("Save"); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        cancelButton.setText("Cancel"); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        backgroundImageLabel.setText("Background image:"); // NOI18N
        backgroundImageLabel.setName("backgroundImageLabel"); // NOI18N

        backgroundImageTextField.setText(""); // NOI18N
        backgroundImageTextField.setName("backgroundImageTextField"); // NOI18N

        backgroundImageDescriptionLabel.setText("Image that is show in the background"); // NOI18N
        backgroundImageDescriptionLabel.setName("backgroundImageDescriptionLabel"); // NOI18N

        browseButton.setText("Browse"); // NOI18N
        browseButton.setName("BrowseButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cellPerPixelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cellPerPixelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cellPerPixelDescription1Label)
                            .addComponent(cellPerPixelDescription2Label)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backgroundImageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backgroundImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(browseButton))
                            .addComponent(backgroundImageDescriptionLabel))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {saveButton, cancelButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellPerPixelLabel)
                    .addComponent(cellPerPixelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cellPerPixelDescription1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cellPerPixelDescription2Label)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backgroundImageLabel)
                    .addComponent(backgroundImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backgroundImageDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
    * @param args the command line arguments
    */

    // Variables declaration - do not modify
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel backgroundImageDescriptionLabel;
    private javax.swing.JLabel backgroundImageLabel;
    private javax.swing.JTextField backgroundImageTextField;
    private javax.swing.JLabel cellPerPixelDescription1Label;
    private javax.swing.JLabel cellPerPixelDescription2Label;
    private javax.swing.JLabel cellPerPixelLabel;
    private javax.swing.JTextField cellPerPixelTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton cancelButton;
    // End of variables declaration

    public double getCellPerPixel() {
        return cellPerPixel;
    }

    public void setCellsPerPixel(double cellPerPixel) {
        this.cellPerPixel = cellPerPixel;
        this.cellPerPixelTextField.setText(""+cellPerPixel);
    }

    public File getBackgroundImage() {
        return backgroundImage;
    }

    public void setBackgroundImage(File backgroundImage) {
        this.backgroundImage = backgroundImage;
        this.backgroundImageTextField.setText(backgroundImage.getAbsolutePath());
    }

}

